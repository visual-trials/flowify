/*

   Copyright 2018 Jeffrey Hullekes

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

 */

Flowify.main = function () {
    "use strict"

    let my = {}
    
    my.autoReload = false
    
    my.frameIndex = 0
    my.maxNrOfFramesForTiming = 60 // always keep this is sync with input.cpp!
    
    my.clockBeforeUpdateAndRender = performance.now()
    my.clockAfterUpdate = performance.now()
    my.clockAfterRender = performance.now()
    my.clockAfterWait = performance.now()
    
    my.mainLoop = function () {

        let previousClockAfterWait = my.clockAfterWait
        my.clockAfterWait = performance.now()
        
        let inputTime = (my.clockBeforeUpdateAndRender - previousClockAfterWait) / 1000
        let updatingTime = (my.clockAfterUpdate - my.clockBeforeUpdateAndRender) / 1000
        let renderingTime = (my.clockAfterRender - my.clockAfterUpdate) / 1000
        let waitingTime = (my.clockAfterWait - my.clockAfterRender) / 1000
        
        Flowify.canvas.resizeCanvas()
        Flowify.canvas.clearCanvas()

        let input = Flowify.input
        
        input.sendMouseData()
        input.sendTouchData()
        input.sendKeyboardData()
        input.sendFileUploadData()
        
        my.wasmInstance.exports._set_frame_time(
            my.frameIndex, 
            inputTime,
            updatingTime,
            renderingTime,
            waitingTime
        )
        
        my.wasmInstance.exports._set_screen_size(
            Flowify.canvas.canvasElement.width,
            Flowify.canvas.canvasElement.height,
            Flowify.canvas.scale,
            window.devicePixelRatio ? window.devicePixelRatio : 1,
            Flowify.canvas.usingPhysicalPixels,
        )
        
        my.clockBeforeUpdateAndRender = performance.now()
        
        input.resetMouseData()
        input.resetTouchData()
        input.resetKeyboardData()
        input.resetFileUploadData()

        // Update world
        my.wasmInstance.exports._update_frame()
        
        my.clockAfterUpdate = performance.now()
        
        // Render world
        my.wasmInstance.exports._render_frame()

        // In the browser, the actual rendering takes place outside this loop,
        // so clockAfterRender will not include actual rendering. It will only include
        // *sending* the render-commands, but not the actual rendering of them.
        my.clockAfterRender = performance.now()
        
        my.frameIndex++
        if (my.frameIndex >= my.maxNrOfFramesForTiming) {
            my.frameIndex = 0
        }
        Flowify.canvas.requestAnimFrame(my.mainLoop)
    }
    
    let wasmEnv = {}
    let dynamicBase = null
    let dynamicSize = null
    
    // This calculation of STACKTOP, DYNAMICTOP_PTR and DYNAMIC_BASE is extracted from the .js file emcc generated
    {
        function alignMemory(size, factor) {
            if (!factor) factor = STACK_ALIGN
            var ret = size = Math.ceil(size / factor) * factor
            return ret
        }
        
        function staticAlloc(size) {
            let ret = STATICTOP
            STATICTOP = STATICTOP + size + 15 & -16
            return ret
        }

        let WASM_PAGE_SIZE = 65536

        let STACK_ALIGN = 16
        let STATIC_BASE, STATICTOP, staticSealed
        let STACK_BASE, STACKTOP, STACK_MAX
        let DYNAMIC_BASE, DYNAMICTOP_PTR
        
        STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0
        
        let TOTAL_STACK = 1024 * 1024  // 1MB stack memory
        let TOTAL_MEMORY = 34 * 1024 * 1024  // 34MB of total memory (1MB for stack, 32BM for dynamic)  --> this has to be equal to TOTAL_MEMORY in emmc-command line call

        let GLOBAL_BASE = 1024
        STATIC_BASE = GLOBAL_BASE
        // TODO: this STATIC_BUMP is normally generated by the emcc compiler and seems to depend on the amount 
        //       of default stack space the program needs. When we use a lot of static memory this should go up.
        let STATIC_BUMP = 65536 // 16992 
        STATICTOP = STATIC_BASE + STATIC_BUMP
        STATICTOP += 16
        
        DYNAMICTOP_PTR = staticAlloc(4)
        STACK_BASE = STACKTOP = alignMemory(STATICTOP)
        STACK_MAX = STACK_BASE + TOTAL_STACK
        DYNAMIC_BASE = alignMemory(STACK_MAX)
        
        let memory = new WebAssembly.Memory({
                initial: TOTAL_MEMORY / WASM_PAGE_SIZE,  // 512 = 32MB
                maximum: TOTAL_MEMORY / WASM_PAGE_SIZE,
        })
        
        let table = new WebAssembly.Table({
                initial: 1024,
                maximum: 1024,
                element: 'anyfunc',
        })
        
        my.bufferU8 = new Uint8Array(memory.buffer)
        my.bufferI32 = new Int32Array(memory.buffer)

        my.bufferI32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE
        
        wasmEnv = {
            STACKTOP: STACKTOP,
            memoryBase: STATIC_BASE,
            tableBase: 0,
            memory: memory,
            table: table,
        }
        
        wasmEnv._emscripten_memcpy_big = function(dest, src, num) {
            my.bufferU8.set(my.bufferU8.subarray(src, src+num), dest)
            return dest
        }
        
        dynamicBase = DYNAMIC_BASE
        dynamicSize = 32 * 1024 * 1024  // 32MB of dynamic memory
    }
    
    let exportedFunctions = Flowify.canvas.getExportedFunctions()
    for (let functionName in exportedFunctions) {
        wasmEnv[functionName] = exportedFunctions[functionName]
    }
    
    let wasmFile = Flowify.canvas.canvasElement.dataset.wasmFile
    let latestChangeToWasm = null

    let request = new XMLHttpRequest()
    request.onload = function() {
    
        let wasmCode = request.response
        let responseHeaders = request.getAllResponseHeaders().split("\n")
        
        latestChangeToWasm = responseHeaders[1] // FIXME: ugly way of getting the latest changed time
        
        WebAssembly.instantiate(wasmCode, { env: wasmEnv })
        .then( wasm_module => {
            
            my.wasmInstance = wasm_module.instance
            
            my.wasmInstance.exports._set_address_and_size_dynamic_memory(dynamicBase, dynamicSize)
            
            Flowify.canvas.loadUsingPhysicalPixelsFromCookie()
            
            my.wasmInstance.exports._init_world()
            
            Flowify.input.addressKeysThatAreDown = my.wasmInstance.exports._get_address_keys_that_are_down()
            Flowify.input.addressSequenceKeysUpDown = my.wasmInstance.exports._get_address_sequence_keys_up_down()
            Flowify.input.addressFileUpload = my.wasmInstance.exports._get_address_file_upload()

            Flowify.input.addFileInputElement()  // TODO: put this in addInputListeners?
            Flowify.input.addInputListeners()
            
            my.mainLoop()
            
        })
    }
    request.open('GET', wasmFile)
    request.responseType = 'arraybuffer'
    request.send()
    
    if (my.autoReload) {
        let reloadWhenWasmChanged = function() {
        
            let request = new XMLHttpRequest()
            request.open('HEAD', wasmFile)
            request.setRequestHeader('cache-control', 'no-cache, must-revalidate, post-check=0, pre-check=0');
            request.send()

            request.onload = function() {
                let responseHeaders = request.getAllResponseHeaders().split("\n")
                
                let newChangeToWasm = responseHeaders[1] // FIXME: ugly way of getting the latest changed time
                // console.log('checking wasm: ' + newChangeToWasm + " -- " + latestChangeToWasm)
                if (latestChangeToWasm != null && newChangeToWasm !== latestChangeToWasm) {
                    location.reload()
                }
                else {
                    setTimeout(reloadWhenWasmChanged, 500)
                }
            }
        }
        
        setTimeout(reloadWhenWasmChanged, 500)
    }

    return my

}()
